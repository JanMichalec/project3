name: Azure Pipelines
trigger:
  - main
pool: myAgentPool
variables:
  python.version: 3.7.6
  azureServiceConnectionId: myServiceConnection
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: test
stages:
  - stage: Build
    jobs:
      - job: BuildInfrastructure
        steps:
          - task: >-
              ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: Terrafom installation
            inputs:
              terraformVersion: 1.2.9
          - task: >-
              ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terrafom init
            inputs:
              provider: azurerm
              command: init
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
              backendServiceArm: $(azureServiceConnectionId)
              backendAzureRmResourceGroupName: tfstate
              backendAzureRmStorageAccountName: tfstate1915325024
              backendAzureRmContainerName: tfstate
              backendAzureRmKey: test.terraform.tfstate
          - task: >-
              ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: azurerm
              command: validate
          - task: >-
              ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: azurerm
              command: apply
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
              environmentServiceNameAzureRM: $(azureServiceConnectionId)
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: sudo npm install -g newman
              workingDirectory: $(System.DefaultWorkingDirectory)
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: >-
                newman run TestSuite.Data-Validation.json -e
                Test.environment.json --reporters cli,junit
                --reporter-junit-export TEST-DataValidation.xml
              workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: >-
                newman run TestSuite.Regression.json -e Test.environment.json
                --reporters cli,junit --reporter-junit-export
                TEST-Regression.xml
              workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: null
              mergeTestResults: true
              testRunTitle: null
          - task: ArchiveFiles@2
            displayName: Archive UI Tests
            inputs:
              rootFolderOrFile: $(System.DefaultWorkingDirectory)/automatedtesting/selenium
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
            displayName: Upload Package
            artifact: drop-uitests
          - task: ArchiveFiles@2
            displayName: Archive FakeRestAPI
            inputs:
              rootFolderOrFile: null
              includeRootFolder: false
              archiveType: zip
              archiveFile: >-
                $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: Upload Package
            artifact: drop-fakerestapi
          - task: ArchiveFiles@2
            displayName: Archive PerformanceTestSuite
            inputs:
              rootFolderOrFile: null
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: Upload Package
            artifact: drop-perftests
  - stage: Deploy
    dependsOn: Build
    jobs:
      - deployment: FakeRestAPI
        pool:
          vmImage: Ubuntu-18.04
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: Deploy Azure Web App
                  inputs:
                    azureSubscription: ''
                    appName: ''
                    appType: webApp
                    package: $(Pipeline.Workspace)/<artifact>/<archiveFile>
                - task: CmdLine@2
                  inputs:
                    script: >
                      wget
                      "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"

                      tar -xf apache-jmeter-5.2.1.tgz

                      unzip -o $(Build.BuildId)-perftests.zip

                      ./apache-jmeter-5.2.1/bin/jmeter -n -t
                      PerformanceTestSuite.jmx -j jmeter.log -f

                      cat
                      jmeter.log                                                                          
                      # ToDo: Write your commands
                    workingDirectory: $(Pipeline.Workspace)/<artifact>
