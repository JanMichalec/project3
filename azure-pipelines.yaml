name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'tfstate' # added
        backendAzureRmStorageAccountName: 'tfstate818429502' # added
        backendAzureRmContainerName: 'tfstate' # added
        backendAzureRmKey: 'test.terraform.tfstate' 

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'


#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Newman Tests
      continueOnError: true
      inputs:
        script: 'newman run ./automatedtesting/postman/api-integration-test.json --bail newman -x --reporters cli,junit --reporter-junit-export postman_test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: CmdLine@2
      inputs:
        script: 'ls'
        workingDirectory: '$(System.DefaultWorkingDirectory)' 
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        testResultsFormat: 'JUnit'
        mergeTestResults: true

#     #--------------------------------------------#
#     # Selenium (UI) Test Suite - Archive the package  
#     # "ArchiveFiles@2" picks up the web package and archives it.
#     - task: ArchiveFiles@2
#       displayName: 'Archive UI Tests'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
#     # Selenium Test Suite - Publish the package  
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
#       displayName: 'Upload Package'
#       artifact: drop-uitests

#     #--------------------------------------------#    
#     # FakeRestAPI - Archive
#     # ToDo: Complete the ArchiveFiles@2 task and publish step 
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: 
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: drop-fakerestapi

#     #--------------------------------------------#  
#     # JMeter (Performance) Test Suite - Archive
#     # ToDo: Complete the ArchiveFiles@2 task and publish step 
#     - task: ArchiveFiles@2
#       displayName: 'Archive PerformanceTestSuite'
#       inputs:
#         rootFolderOrFile: 
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
#     # JMeter Test Suite - Publish    
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
#       displayName: 'Upload Package'
#       artifact: drop-perftests


# #--------------------------------------------#  
# # DEPLOYMENT STAGE
# #--------------------------------------------#    
# - stage: Deploy
#   dependsOn: Build
#   jobs:
#   #--------------------------------------------#  
#   # Deploy FakeRestAPI Web App
#   # ToDo: Provide <environment name> you created in your DevOps project
#     - deployment: FakeRestAPI
#       pool:
#         vmImage: 'Ubuntu-20.04'      
#       environment: '$(environmentName)'   # added
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - task: AzureWebApp@1
#               displayName: 'Deploy Azure Web App'
#               inputs:
#                 azureSubscription: 'myServiceConnection'     # Added
#                 appName: 'honzicek999'               # Added
#                 appType: webApp
#                 package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'      # Added

# ### TESTS
# - stage: Tests
#   dependsOn: Deploy
#   jobs: 
#     - job: Tests
#       displayName: 'Tests'
#       steps:
#       - task: JMeterInstaller@0
#         inputs:
#          jmeterVersion: '5.5'
#         displayName: 'Install JMeter' 
#       - task: Bash@3
#         inputs:
#           targetType: 'inline'
#           script: |
#              jmeter -n -t ./automatedtesting/jmeter/Test.jmx -l jmeter/report.jtl -e -o html_report -j jmeter.log -f
#              cat jmeter.log
#         displayName: 'Jmeter Test' 
#       - task: ArchiveFiles@2
#         displayName: 'Archive Jmeter report'
#         inputs:
#           rootFolderOrFile: '$(System.DefaultWorkingDirectory)/html_report'
#           includeRootFolder: false
#           archiveType: 'zip'
#           archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-html_report.zip'
#       - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-html_report.zip   # Same as the archiveFile artifact above. 
#         displayName: 'Upload Package'
#         artifact: html_report
#       - task: Bash@3
#         inputs:
#           targetType: 'inline'
#           script: |           
#             #! /bin/bash
            
#             sudo apt-get upgrade -y
#             sudo apt-get install python3-pip -y
#             sudo apt-get install unzip -y
#             sudo apt-get install -y chromium-browser
#             pip3 install selenium

#             # chrome driver
#             wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/115.0.5790.102/linux64/chromedriver-linux64.zip
#             unzip chromedriver-linux64.zip
#             sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
#             sudo chmod +x /usr/local/bin/chromedriver

#             # check versions
#             chromium-browser -version
#             chromedriver --version
#         displayName: 'Install Selenium'
#       - task: Bash@3
#         inputs:
#           targetType: 'inline'
#           script: |
#                 ls ./automatedtesting/selenium
#                 python3 ./automatedtesting/selenium/ui_test.py > ui-logs.log
#                 cat ui-logs.log
#         displayName: 'Selenium Test' 




